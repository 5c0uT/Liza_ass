"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –õ–∏–∑–∞.
"""

import logging
import json
import os
from datetime import datetime
from PyQt6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QTextEdit, QPushButton, QLabel, QStatusBar,
                             QSystemTrayIcon, QMenu, QApplication, QTabWidget,
                             QSplitter, QListWidget, QListWidgetItem, QToolBar,
                             QMessageBox, QDialog, QFormLayout, QLineEdit,
                             QComboBox, QCheckBox, QSpinBox, QDialogButtonBox,
                             QFileDialog)
from PyQt6.QtCore import Qt, pyqtSignal, QSize
from PyQt6.QtGui import QIcon, QAction, QFont, QPalette, QColor

from core.gui.workflow_editor import WorkflowEditor
from core.gui.themes import DarkTheme, LightTheme


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –õ–∏–∑–∞."""

    # –°–∏–≥–Ω–∞–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_started = pyqtSignal()
    app_stopped = pyqtSignal()
    settings_changed = pyqtSignal(dict)

    def __init__(self, app):
        super().__init__()
        self.app = app
        self.logger = logging.getLogger(__name__)
        self.workflow_editor = None
        self.current_theme = "light"
        self.is_listening = False

        self.setWindowTitle("AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –õ–∏–∑–∞ v1.0")
        self.setGeometry(100, 100, 1400, 900)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings = self._load_settings()

        self._setup_ui()
        self._setup_tray_icon()
        self._apply_theme()
        self._setup_hotkeys()

    def _load_settings(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        default_settings = {
            "theme": "light",
            "autostart": False,
            "notifications": True,
            "log_level": "INFO",
            "max_log_lines": 1000,
            "voice_sensitivity": 0.5,
            "hotkeys": {
                "start_listening": "Ctrl+Space",
                "stop_listening": "Ctrl+Shift+Space",
                "show_hide": "Ctrl+Alt+L"
            }
        }

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É config –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            os.makedirs("config", exist_ok=True)
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            with open("config/app_settings.json", "r", encoding="utf-8") as f:
                saved_settings = json.load(f)
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                default_settings.update(saved_settings)
        except (FileNotFoundError, json.JSONDecodeError):
            self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

        return default_settings

    def _save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        try:
            with open("config/app_settings.json", "w", encoding="utf-8") as f:
                json.dump(self.settings, f, indent=2, ensure_ascii=False)
            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            self.settings_changed.emit(self.settings)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        splitter = QSplitter(Qt.Orientation.Horizontal)
        main_layout.addWidget(splitter)

        # –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–ª–µ–≤–∞
        self.nav_panel = self._create_navigation_panel()
        splitter.addWidget(self.nav_panel)

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ —Å–ø—Ä–∞–≤–∞
        self.tab_widget = QTabWidget()
        splitter.addWidget(self.tab_widget)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        splitter.setSizes([200, 1200])

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self._create_dashboard_tab()
        self._create_logs_tab()
        self._create_workflows_tab()
        self._create_settings_tab()

        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        # –°–æ–∑–¥–∞–µ–º —Ç—É–ª–±–∞—Ä
        self._setup_toolbar()

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if hasattr(self.app, 'voice_command_received'):
            self.app.voice_command_received.connect(self._on_command_received)
        if hasattr(self.app, 'status_changed'):
            self.app.status_changed.connect(self._on_status_changed)

    def _create_navigation_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
        nav_widget = QWidget()
        nav_layout = QVBoxLayout(nav_widget)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–õ–∏–∑–∞ v1.0")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("font-weight: bold; font-size: 16px; margin: 10px;")
        nav_layout.addWidget(title)

        # –°–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤
        self.nav_list = QListWidget()
        nav_items = [
            ("üìä –î–∞—à–±–æ—Ä–¥", "dashboard"),
            ("üìù –ñ—É—Ä–Ω–∞–ª", "logs"),
            ("‚öôÔ∏è Workflows", "workflows"),
            ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings"),
            ("üìö –°–ø—Ä–∞–≤–∫–∞", "help")
        ]

        for text, data in nav_items:
            item = QListWidgetItem(text)
            item.setData(Qt.ItemDataRole.UserRole, data)
            self.nav_list.addItem(item)

        self.nav_list.currentRowChanged.connect(self._on_navigation_changed)
        nav_layout.addWidget(self.nav_list)

        # –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        self.quick_action_btn = QPushButton("üé§ –°–ª—É—à–∞—Ç—å")
        self.quick_action_btn.clicked.connect(self._on_quick_action)
        nav_layout.addWidget(self.quick_action_btn)

        return nav_widget

    def _create_dashboard_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞."""
        dashboard_widget = QWidget()
        layout = QVBoxLayout(dashboard_widget)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
        title.setStyleSheet("font-weight: bold; font-size: 18px;")
        layout.addWidget(title)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_widget = QWidget()
        stats_layout = QHBoxLayout(stats_widget)

        stats = [
            ("–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥", "152", "#4CAF50"),
            ("–ê–∫—Ç–∏–≤–Ω—ã—Ö workflow", "7", "#2196F3"),
            ("–û—à–∏–±–æ–∫", "3", "#F44336"),
            ("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", "12:45:32", "#FF9800")
        ]

        for stat_name, stat_value, color in stats:
            stat_widget = QWidget()
            stat_widget.setStyleSheet(f"background-color: {color}; border-radius: 5px; padding: 10px;")
            stat_layout = QVBoxLayout(stat_widget)

            name_label = QLabel(stat_name)
            name_label.setStyleSheet("color: white; font-size: 12px;")
            value_label = QLabel(stat_value)
            value_label.setStyleSheet("color: white; font-size: 18px; font-weight: bold;")

            stat_layout.addWidget(name_label)
            stat_layout.addWidget(value_label)
            stats_layout.addWidget(stat_widget)

        layout.addWidget(stats_widget)

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        recent_label = QLabel("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
        layout.addWidget(recent_label)

        self.recent_commands = QTextEdit()
        self.recent_commands.setReadOnly(True)
        self.recent_commands.setMaximumHeight(200)
        layout.addWidget(self.recent_commands)

        self.tab_widget.addTab(dashboard_widget, "üìä –î–∞—à–±–æ—Ä–¥")

    def _create_logs_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∂—É—Ä–Ω–∞–ª–∞."""
        logs_widget = QWidget()
        layout = QVBoxLayout(logs_widget)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–æ–º
        log_controls = QHBoxLayout()

        self.clear_logs_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª")
        self.clear_logs_btn.clicked.connect(self._clear_logs)
        log_controls.addWidget(self.clear_logs_btn)

        self.save_logs_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∂—É—Ä–Ω–∞–ª")
        self.save_logs_btn.clicked.connect(self._save_logs)
        log_controls.addWidget(self.save_logs_btn)

        log_level_label = QLabel("–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
        log_controls.addWidget(log_level_label)

        self.log_level_combo = QComboBox()
        self.log_level_combo.addItems(["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"])
        self.log_level_combo.setCurrentText(self.settings.get("log_level", "INFO"))
        self.log_level_combo.currentTextChanged.connect(self._change_log_level)
        log_controls.addWidget(self.log_level_combo)

        layout.addLayout(log_controls)

        # –ñ—É—Ä–Ω–∞–ª
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        layout.addWidget(self.log_text)

        self.tab_widget.addTab(logs_widget, "üìù –ñ—É—Ä–Ω–∞–ª")

    def _create_workflows_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ workflows."""
        workflows_widget = QWidget()
        layout = QVBoxLayout(workflows_widget)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è workflows
        wf_controls = QHBoxLayout()

        self.new_wf_btn = QPushButton("–°–æ–∑–¥–∞—Ç—å workflow")
        self.new_wf_btn.clicked.connect(self._create_new_workflow)
        wf_controls.addWidget(self.new_wf_btn)

        self.open_wf_btn = QPushButton("–û—Ç–∫—Ä—ã—Ç—å workflow")
        self.open_wf_btn.clicked.connect(self._open_workflow)
        wf_controls.addWidget(self.open_wf_btn)

        self.run_wf_btn = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π")
        self.run_wf_btn.clicked.connect(self._run_workflow)
        wf_controls.addWidget(self.run_wf_btn)

        layout.addLayout(wf_controls)

        # –°–ø–∏—Å–æ–∫ workflows
        wf_list_label = QLabel("–î–æ—Å—Ç—É–ø–Ω—ã–µ workflows:")
        layout.addWidget(wf_list_label)

        self.wf_list = QListWidget()
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ workflows –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        self._load_workflows_list()
        layout.addWidget(self.wf_list)

        self.tab_widget.addTab(workflows_widget, "‚öôÔ∏è Workflows")

    def _load_workflows_list(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ workflows –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã."""
        workflows_dir = "workflows"
        self.wf_list.clear()

        try:
            if not os.path.exists(workflows_dir):
                os.makedirs(workflows_dir)
                self.logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {workflows_dir}")
                return

            for file in os.listdir(workflows_dir):
                if file.endswith(".json"):
                    workflow_name = file[:-5]  # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .json
                    self.wf_list.addItem(workflow_name)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ workflows: {e}")

    def _create_settings_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        settings_widget = QWidget()
        layout = QVBoxLayout(settings_widget)

        # –§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        form_layout = QFormLayout()

        # –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        self.theme_combo = QComboBox()
        self.theme_combo.addItems(["–°–≤–µ—Ç–ª–∞—è", "–¢–µ–º–Ω–∞—è"])
        self.theme_combo.setCurrentText("–°–≤–µ—Ç–ª–∞—è" if self.settings.get("theme") == "light" else "–¢–µ–º–Ω–∞—è")
        self.theme_combo.currentTextChanged.connect(self._change_theme)
        form_layout.addRow("–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:", self.theme_combo)

        # –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞
        self.autostart_check = QCheckBox()
        self.autostart_check.setChecked(self.settings.get("autostart", False))
        self.autostart_check.stateChanged.connect(self._toggle_autostart)
        form_layout.addRow("–ó–∞–ø—É—Å–∫ —Å —Å–∏—Å—Ç–µ–º–æ–π:", self.autostart_check)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.notifications_check = QCheckBox()
        self.notifications_check.setChecked(self.settings.get("notifications", True))
        self.notifications_check.stateChanged.connect(self._toggle_notifications)
        form_layout.addRow("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", self.notifications_check)

        # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–∞
        self.voice_sensitivity = QSpinBox()
        self.voice_sensitivity.setRange(1, 100)
        self.voice_sensitivity.setValue(int(self.settings.get("voice_sensitivity", 0.5) * 100))
        self.voice_sensitivity.valueChanged.connect(self._change_voice_sensitivity)
        form_layout.addRow("–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–∞ (%):", self.voice_sensitivity)

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∂—É—Ä–Ω–∞–ª–µ
        self.max_log_lines = QSpinBox()
        self.max_log_lines.setRange(100, 10000)
        self.max_log_lines.setValue(self.settings.get("max_log_lines", 1000))
        self.max_log_lines.valueChanged.connect(self._change_max_log_lines)
        form_layout.addRow("–ú–∞–∫—Å. —Å—Ç—Ä–æ–∫ –≤ –∂—É—Ä–Ω–∞–ª–µ:", self.max_log_lines)

        layout.addLayout(form_layout)

        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/—Å–±—Ä–æ—Å–∞
        button_layout = QHBoxLayout()

        self.save_settings_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.save_settings_btn.clicked.connect(self._save_settings)
        button_layout.addWidget(self.save_settings_btn)

        self.reset_settings_btn = QPushButton("–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.reset_settings_btn.clicked.connect(self._reset_settings)
        button_layout.addWidget(self.reset_settings_btn)

        layout.addLayout(button_layout)

        self.tab_widget.addTab(settings_widget, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    def _setup_toolbar(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
        toolbar = QToolBar("–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å")
        toolbar.setIconSize(QSize(24, 24))
        self.addToolBar(toolbar)

        # –î–µ–π—Å—Ç–≤–∏—è
        self.start_action = QAction(QIcon(":/icons/start.png"), "–ó–∞–ø—É—Å–∫", self)
        self.start_action.triggered.connect(self._on_start_clicked)
        toolbar.addAction(self.start_action)

        self.stop_action = QAction(QIcon(":/icons/stop.png"), "–û—Å—Ç–∞–Ω–æ–≤–∫–∞", self)
        self.stop_action.triggered.connect(self._on_stop_clicked)
        self.stop_action.setEnabled(False)
        toolbar.addAction(self.stop_action)

        toolbar.addSeparator()

        settings_action = QAction(QIcon(":/icons/settings.png"), "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", self)
        settings_action.triggered.connect(self._show_settings)
        toolbar.addAction(settings_action)

        help_action = QAction(QIcon(":/icons/help.png"), "–°–ø—Ä–∞–≤–∫–∞", self)
        help_action.triggered.connect(self._show_help)
        toolbar.addAction(help_action)

    def _setup_tray_icon(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∫–æ–Ω–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ."""
        if not QSystemTrayIcon.isSystemTrayAvailable():
            self.logger.warning("–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        self.tray_icon = QSystemTrayIcon(self)
        self.tray_icon.setIcon(QIcon(":/icons/app_icon.png"))
        self.tray_icon.setToolTip("AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –õ–∏–∑–∞ v1.0")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        tray_menu = QMenu()

        show_action = QAction("–ü–æ–∫–∞–∑–∞—Ç—å", self)
        show_action.triggered.connect(self.show)
        tray_menu.addAction(show_action)

        hide_action = QAction("–°–∫—Ä—ã—Ç—å", self)
        hide_action.triggered.connect(self.hide)
        tray_menu.addAction(hide_action)

        tray_menu.addSeparator()

        start_action = QAction("–ó–∞–ø—É—Å—Ç–∏—Ç—å", self)
        start_action.triggered.connect(self._on_start_clicked)
        tray_menu.addAction(start_action)

        stop_action = QAction("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", self)
        stop_action.triggered.connect(self._on_stop_clicked)
        tray_menu.addAction(stop_action)

        tray_menu.addSeparator()

        quit_action = QAction("–í—ã—Ö–æ–¥", self)
        quit_action.triggered.connect(QApplication.quit)
        tray_menu.addAction(quit_action)

        self.tray_icon.setContextMenu(tray_menu)
        self.tray_icon.show()
        self.tray_icon.activated.connect(self._on_tray_activated)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        if self.settings.get("notifications", True):
            self.tray_icon.showMessage(
                "–õ–∏–∑–∞ v1.0",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
                QSystemTrayIcon.MessageIcon.Information,
                2000
            )

    def _setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à."""
        # –°–æ–∑–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        self.hotkey_actions = {}

        # –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        show_hide_action = QAction(self)
        show_hide_action.setShortcut(self.settings["hotkeys"]["show_hide"])
        show_hide_action.triggered.connect(self._toggle_show_hide)
        self.addAction(show_hide_action)
        self.hotkey_actions["show_hide"] = show_hide_action

        # –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        start_listening_action = QAction(self)
        start_listening_action.setShortcut(self.settings["hotkeys"]["start_listening"])
        start_listening_action.triggered.connect(self._start_listening)
        self.addAction(start_listening_action)
        self.hotkey_actions["start_listening"] = start_listening_action

        # –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        stop_listening_action = QAction(self)
        stop_listening_action.setShortcut(self.settings["hotkeys"]["stop_listening"])
        stop_listening_action.triggered.connect(self._stop_listening)
        self.addAction(stop_listening_action)
        self.hotkey_actions["stop_listening"] = stop_listening_action

    def _apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."""
        if self.settings.get("theme") == "dark":
            theme = LightTheme()
        else:
            theme = DarkTheme()

        theme.apply_to_app(QApplication.instance())

    def _on_tray_activated(self, reason):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–∫–æ–Ω–∫–∏ –≤ —Ç—Ä–µ–µ."""
        if reason == QSystemTrayIcon.ActivationReason.DoubleClick:
            if self.isVisible():
                self.hide()
            else:
                self.show()
                self.activateWindow()

    def _on_navigation_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
        self.tab_widget.setCurrentIndex(index)

    def _on_quick_action(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        if not self.is_listening:
            self._start_listening()
        else:
            self._stop_listening()

    def _start_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è."""
        if hasattr(self.app, 'start_listening'):
            self.app.start_listening()
            self.is_listening = True
            self.quick_action_btn.setText("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            self.status_bar.showMessage("–°–ª—É—à–∞—é...")
            self.logger.info("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

    def _stop_listening(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è."""
        if hasattr(self.app, 'stop_listening'):
            self.app.stop_listening()
            self.is_listening = False
            self.quick_action_btn.setText("üé§ –°–ª—É—à–∞—Ç—å")
            self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            self.logger.info("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    def _toggle_show_hide(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞."""
        if self.isVisible():
            self.hide()
        else:
            self.show()
            self.activateWindow()

    def _on_start_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ó–∞–ø—É—Å–∫."""
        self.logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ GUI")
        self.app_started.emit()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        self.start_action.setEnabled(False)
        self.stop_action.setEnabled(True)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if self.settings.get("notifications", True):
            self.tray_icon.showMessage(
                "–õ–∏–∑–∞ v1.0",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ",
                QSystemTrayIcon.MessageIcon.Information,
                1000
            )

    def _on_stop_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –û—Å—Ç–∞–Ω–æ–≤–∫–∞."""
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ GUI")
        self.app_stopped.emit()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        self.start_action.setEnabled(True)
        self.stop_action.setEnabled(False)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if self.settings.get("notifications", True):
            self.tray_icon.showMessage(
                "–õ–∏–∑–∞ v1.0",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                QSystemTrayIcon.MessageIcon.Information,
                1000
            )

    def _show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        self.tab_widget.setCurrentIndex(3)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.show()
        self.activateWindow()

    def _show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É."""
        QMessageBox.information(self, "–°–ø—Ä–∞–≤–∫–∞",
                               "AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –õ–∏–∑–∞ v1.0\n\n"
                               "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ:\n"
                               "https://github.com/yourusername/lisa-assistant")

    def _on_command_received(self, command: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã."""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.append(f"[{timestamp}] –ö–æ–º–∞–Ω–¥–∞: {command}")
        self.recent_commands.append(f"[{timestamp}] {command}")

        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        self.log_text.verticalScrollBar().setValue(
            self.log_text.verticalScrollBar().maximum()
        )

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –≤ –∂—É—Ä–Ω–∞–ª–µ
        max_lines = self.settings.get("max_log_lines", 1000)
        if self.log_text.document().lineCount() > max_lines:
            cursor = self.log_text.textCursor()
            cursor.movePosition(cursor.MoveOperation.Start)
            cursor.select(cursor.SelectionType.LineUnderCursor)
            cursor.removeSelectedText()
            cursor.deleteChar()

    def _on_status_changed(self, status: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞."""
        self.status_bar.showMessage(status)

    def _clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –∂—É—Ä–Ω–∞–ª–∞."""
        self.log_text.clear()
        self.logger.info("–ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω")

    def _save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –≤ —Ñ–∞–π–ª."""
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∂—É—Ä–Ω–∞–ª", "", "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt)"
        )

        if file_path:
            try:
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(self.log_text.toPlainText())
                self.logger.info(f"–ñ—É—Ä–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {file_path}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞: {e}")

    def _change_log_level(self, level):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self.settings["log_level"] = level
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –ª–æ–≥–≥–µ—Ä—É
        numeric_level = getattr(logging, level.upper(), None)
        if isinstance(numeric_level, int):
            logging.getLogger().setLevel(numeric_level)
            self.logger.info(f"–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {level}")

    def _create_new_workflow(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ workflow."""
        if self.workflow_editor is None:
            self.workflow_editor = WorkflowEditor()
            self.workflow_editor.workflow_saved.connect(self._on_workflow_saved)

        self.workflow_editor.show()
        self.workflow_editor.activateWindow()

    def _open_workflow(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ workflow."""
        if self.workflow_editor is None:
            self.workflow_editor = WorkflowEditor()
            self.workflow_editor.workflow_saved.connect(self._on_workflow_saved)

        self.workflow_editor._open_workflow()
        self.workflow_editor.show()
        self.workflow_editor.activateWindow()

    def _run_workflow(self):
        """–ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ workflow."""
        selected_items = self.wf_list.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ workflow –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
            return

        workflow_name = selected_items[0].text()
        self.logger.info(f"–ó–∞–ø—É—Å–∫ workflow: {workflow_name}")

        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ workflow
        try:
            workflow_path = os.path.join("workflows", f"{workflow_name}.json")
            if hasattr(self.app, 'run_workflow'):
                success = self.app.run_workflow(workflow_path)
                if success:
                    self.status_bar.showMessage(f"Workflow '{workflow_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                    self.logger.info(f"Workflow '{workflow_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                else:
                    self.status_bar.showMessage(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ workflow '{workflow_name}'")
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ workflow '{workflow_name}'")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ workflow: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å workflow: {str(e)}")

    def _on_workflow_saved(self, file_path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è workflow."""
        self.logger.info(f"Workflow —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ workflows
        self._load_workflows_list()

    def _change_theme(self, theme_name):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."""
        self.settings["theme"] = "light" if theme_name == "–°–≤–µ—Ç–ª–∞—è" else "dark"
        self._apply_theme()
        self.logger.info(f"–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {theme_name}")

    def _toggle_autostart(self, state):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏."""
        self.settings["autostart"] = state == Qt.CheckState.Checked.value
        self.logger.info(f"–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞: {'–≤–∫–ª—é—á–µ–Ω–∞' if self.settings['autostart'] else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")

        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
        try:
            if hasattr(self.app, 'set_autostart'):
                self.app.set_autostart(self.settings["autostart"])
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    def _toggle_notifications(self, state):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.settings["notifications"] = state == Qt.CheckState.Checked.value
        self.logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–≤–∫–ª—é—á–µ–Ω—ã' if self.settings['notifications'] else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")

    def _change_voice_sensitivity(self, value):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–∞."""
        self.settings["voice_sensitivity"] = value / 100.0
        self.logger.info(f"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {value}%")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫ —Å–∏—Å—Ç–µ–º–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
        if hasattr(self.app, 'set_voice_sensitivity'):
            self.app.set_voice_sensitivity(self.settings["voice_sensitivity"])

    def _change_max_log_lines(self, value):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –≤ –∂—É—Ä–Ω–∞–ª–µ."""
        self.settings["max_log_lines"] = value
        self.logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∂—É—Ä–Ω–∞–ª–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {value}")

    def _reset_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        reply = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            default_settings = {
                "theme": "light",
                "autostart": False,
                "notifications": True,
                "log_level": "INFO",
                "max_log_lines": 1000,
                "voice_sensitivity": 0.5
            }

            self.settings = default_settings
            self._apply_theme()
            self._save_settings()

            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.theme_combo.setCurrentText("–°–≤–µ—Ç–ª–∞—è")
            self.autostart_check.setChecked(False)
            self.notifications_check.setChecked(True)
            self.log_level_combo.setCurrentText("INFO")
            self.voice_sensitivity.setValue(50)
            self.max_log_lines.setValue(1000)

            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞."""
        if self.tray_icon.isVisible():
            self.hide()
            event.ignore()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if self.settings.get("notifications", True):
                self.tray_icon.showMessage(
                    "–õ–∏–∑–∞ v1.0",
                    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
                    QSystemTrayIcon.MessageIcon.Information,
                    2000
                )
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
            self._save_settings()
            event.accept()