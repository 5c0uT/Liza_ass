"""
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram –¥–ª—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –õ–∏–∑–∞.
"""

import logging
import json
import asyncio
from typing import Dict, Any, Optional, List, Callable, Set
from datetime import datetime
from pathlib import Path

from telegram import (
    Update,
    Bot,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    ConversationHandler,
    filters
)
from telegram.error import TelegramError


class TelegramBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º."""

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
    AWAITING_INPUT, AWAITING_CONFIRMATION = range(2)

    def __init__(self, token: str, allowed_chat_ids: List[int] = None,
                 admin_ids: List[int] = None, data_dir: str = "data/telegram"):
        self.logger = logging.getLogger(__name__)
        self.token = token
        self.allowed_chat_ids = allowed_chat_ids or []
        self.admin_ids = admin_ids or []
        self.data_dir = Path(data_dir)
        self.data_dir.mkdir(exist_ok=True)

        self.application = None
        self.bot = None

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.command_handlers = {}
        self.message_handlers = []
        self.callback_handlers = {}

        # –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}

        # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.user_data_cache = {}

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.load_data()

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        states_file = self.data_dir / "user_states.json"
        cache_file = self.data_dir / "user_data_cache.json"

        try:
            if states_file.exists():
                with open(states_file, 'r', encoding='utf-8') as f:
                    self.user_states = json.load(f)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

        try:
            if cache_file.exists():
                with open(cache_file, 'r', encoding='utf-8') as f:
                    self.user_data_cache = json.load(f)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
        states_file = self.data_dir / "user_states.json"
        cache_file = self.data_dir / "user_data_cache.json"

        try:
            with open(states_file, 'w', encoding='utf-8') as f:
                json.dump(self.user_states, f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

        try:
            with open(cache_file, 'w', encoding='utf-8') as f:
                json.dump(self.user_data_cache, f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
        try:
            self.application = (
                ApplicationBuilder()
                .token(self.token)
                .concurrent_updates(True)
                .build()
            )
            self.bot = self.application.bot

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self._register_handlers()

            self.logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            return False

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        # –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self._handle_start))
        self.application.add_handler(CommandHandler("help", self._handle_help))
        self.application.add_handler(CommandHandler("status", self._handle_status))
        self.application.add_handler(CommandHandler("cancel", self._handle_cancel))

        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("admin", self._handle_admin))
        self.application.add_handler(CommandHandler("broadcast", self._handle_broadcast))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self._handle_callback_query))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_text_message))
        self.application.add_handler(MessageHandler(filters.PHOTO, self._handle_photo))
        self.application.add_handler(MessageHandler(filters.DOCUMENT, self._handle_document))
        self.application.add_handler(MessageHandler(filters.VOICE, self._handle_voice))

        # Conversation handler –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("setup", self._handle_setup)],
            states={
                self.AWAITING_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_setup_input)],
                self.AWAITING_CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_setup_confirmation)]
            },
            fallbacks=[CommandHandler("cancel", self._handle_cancel)]
        )
        self.application.add_handler(conv_handler)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        for command, handler in self.command_handlers.items():
            self.application.add_handler(CommandHandler(command, handler))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self._handle_error)

    async def _handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
        chat_id = update.effective_chat.id
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        if not self._check_access(chat_id):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        self._save_user_info(user)

        welcome_text = """
        üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –õ–∏–∑–∞.

        –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:
        ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –∑–∞–¥–∞—á
        ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏ –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–¥–∞
        ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Å–∏—Å—Ç–µ–º—ã
        ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ—Å—É—Ä—Å–∞–º–∏

        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
        """

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        keyboard = [
            [KeyboardButton("/help"), KeyboardButton("/status")],
            [KeyboardButton("/tasks"), KeyboardButton("/monitor")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
        self._log_interaction(chat_id, user.username, "start", "success")

    async def _handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help."""
        chat_id = update.effective_chat.id

        if not self._check_access(chat_id):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        help_text = """
        üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

        /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
        /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
        /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        /setup - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        /cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏

        üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /tasks - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
        /monitor - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
        /analyze - –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞

        üí¨ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π.
        """

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        inline_keyboard = [
            [InlineKeyboardButton("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="status")],
            [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="tasks")],
            [InlineKeyboardButton("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="monitor")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard)

        await update.message.reply_text(help_text, reply_markup=reply_markup)

    async def _handle_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status."""
        chat_id = update.effective_chat.id

        if not self._check_access(chat_id):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        # TODO: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        status_text = """
        üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:

        ‚Ä¢ CPU: 45% ‚úÖ
        ‚Ä¢ –ü–∞–º—è—Ç—å: 60% ‚ö†Ô∏è
        ‚Ä¢ –î–∏—Å–∫: 75% ‚ö†Ô∏è
        ‚Ä¢ –°–µ—Ç—å: 100Mbps ‚úÖ

        üü¢ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.
        """

        await update.message.reply_text(status_text)

    async def _handle_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel."""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if str(user_id) in self.user_states:
            del self.user_states[str(user_id)]
            self.save_data()

        await update.message.reply_text(
            "‚ùå –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    async def _handle_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id

        if not self._check_admin_access(user_id):
            await update.message.reply_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        admin_text = """
        ‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å:

        /broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        /logs - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
        /users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        """

        await update.message.reply_text(admin_text)

    async def _handle_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å—Å—ã–ª–∫–∏."""
        user_id = update.effective_user.id

        if not self._check_admin_access(user_id):
            await update.message.reply_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        self.user_states[str(user_id)] = {
            'state': 'awaiting_broadcast',
            'timestamp': datetime.now().isoformat()
        }
        self.save_data()

        await update.message.reply_text(
            "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("/cancel")]], resize_keyboard=True)
        )

    async def _handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        message_text = update.message.text

        if not self._check_access(chat_id):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = self.user_states.get(str(user_id), {})

        if user_state.get('state') == 'awaiting_broadcast':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            await self._process_broadcast(update, message_text)
            return

        # –í—ã–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handled = False
        for handler in self.message_handlers:
            try:
                result = await handler(update, context, message_text)
                if result:
                    handled = True
                    break
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

        # –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        if not handled:
            default_response = f"üîç –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message_text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            await update.message.reply_text(default_response)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        self._log_interaction(chat_id, update.effective_user.username, "message", message_text)

    async def _handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        await query.answer()  # –û—Ç–≤–µ—Ç–∏–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        callback_data = query.data

        if not self._check_access(chat_id):
            await query.edit_message_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        # –í—ã–∑–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback
        if callback_data in self.callback_handlers:
            try:
                await self.callback_handlers[callback_data](update, context)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö callback
            if callback_data == "status":
                await self._handle_status(update, context)
            elif callback_data == "tasks":
                await query.edit_message_text("üìã –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
            elif callback_data == "monitor":
                await query.edit_message_text("üìä –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        self._log_interaction(chat_id, update.effective_user.username, "callback", callback_data)

    async def _handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
        chat_id = update.effective_chat.id

        if not self._check_access(chat_id):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        await update.message.reply_text("üì∏ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

    async def _handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
        chat_id = update.effective_chat.id

        if not self._check_access(chat_id):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        document = update.message.document
        await update.message.reply_text(f"üìÑ –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {document.file_name}")

    async def _handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        chat_id = update.effective_chat.id

        if not self._check_access(chat_id):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await update.message.reply_text("üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

    async def _handle_setup(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id

        if not self._check_access(chat_id):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return ConversationHandler.END

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[str(user_id)] = {
            'state': 'setup',
            'step': 'awaiting_language',
            'timestamp': datetime.now().isoformat()
        }
        self.save_data()

        await update.message.reply_text(
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language:",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("–†—É—Å—Å–∫–∏–π"), KeyboardButton("English")],
                [KeyboardButton("/cancel")]
            ], resize_keyboard=True)
        )

        return self.AWAITING_INPUT

    async def _handle_setup_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        user_id = update.effective_user.id
        message_text = update.message.text
        user_state = self.user_states.get(str(user_id), {})

        if user_state.get('step') == 'awaiting_language':
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
            if message_text in ["–†—É—Å—Å–∫–∏–π", "Russian"]:
                language = "ru"
            else:
                language = "en"

            self.user_data_cache[str(user_id)] = {
                'language': language,
                'setup_step': 'language_selected'
            }
            self.save_data()

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            self.user_states[str(user_id)]['step'] = 'awaiting_confirmation'
            self.save_data()

            await update.message.reply_text(
                f"‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message_text}\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å")],
                    [KeyboardButton("/cancel")]
                ], resize_keyboard=True)
            )

            return self.AWAITING_CONFIRMATION

        return self.AWAITING_INPUT

    async def _handle_setup_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        user_id = update.effective_user.id
        message_text = update.message.text

        if message_text.lower() in ["–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "confirm"]:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user_data = self.user_data_cache.get(str(user_id), {})
            # TODO: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            await update.message.reply_text(
                "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                reply_markup=ReplyKeyboardRemove()
            )

            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if str(user_id) in self.user_data_cache:
                del self.user_data_cache[str(user_id)]
            if str(user_id) in self.user_states:
                del self.user_states[str(user_id)]
            self.save_data()

            return ConversationHandler.END
        else:
            # –û—Ç–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await update.message.reply_text(
                "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=ReplyKeyboardRemove()
            )

            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if str(user_id) in self.user_data_cache:
                del self.user_data_cache[str(user_id)]
            if str(user_id) in self.user_states:
                del self.user_states[str(user_id)]
            self.save_data()

            return ConversationHandler.END

    async def _process_broadcast(self, update: Update, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        user_id = update.effective_user.id

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        success_count = 0
        fail_count = 0

        for chat_id in self.allowed_chat_ids:
            try:
                await self.send_message(chat_id, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n\n{message_text}")
                success_count += 1
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
                fail_count += 1

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if str(user_id) in self.user_states:
            del self.user_states[str(user_id)]
        self.save_data()

        await update.message.reply_text(
            f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success_count}\n‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}",
            reply_markup=ReplyKeyboardRemove()
        )

    async def _handle_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫."""
        self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ Telegram: {context.error}")

        if update and update.effective_chat:
            try:
                await update.effective_chat.send_message(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

    def _check_access(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É."""
        if not self.allowed_chat_ids:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö
            return True
        return chat_id in self.allowed_chat_ids

    def _check_admin_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞."""
        if not self.admin_ids:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö
            return True
        return user_id in self.admin_ids

    def _save_user_info(self, user):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        user_file = self.data_dir / "users.json"
        users = {}

        try:
            if user_file.exists():
                with open(user_file, 'r', encoding='utf-8') as f:
                    users = json.load(f)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö: {e}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        users[str(user.id)] = {
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'last_seen': datetime.now().isoformat()
        }

        try:
            with open(user_file, 'w', encoding='utf-8') as f:
                json.dump(users, f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö: {e}")

    def _log_interaction(self, chat_id: int, username: str, action: str, details: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'chat_id': chat_id,
            'username': username,
            'action': action,
            'details': details
        }

        log_file = self.data_dir / "interactions.log"

        try:
            with open(log_file, 'a', encoding='utf-8') as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {e}")

    def add_command_handler(self, command: str, handler: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã."""
        self.command_handlers[command] = handler

        # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if self.application:
            self.application.add_handler(CommandHandler(command, handler))

    def add_message_handler(self, handler: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self.message_handlers.append(handler)

    def add_callback_handler(self, callback_data: str, handler: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback."""
        self.callback_handlers[callback_data] = handler

    async def send_message(self, chat_id: int, text: str,
                           keyboard: Optional[List[List[KeyboardButton]]] = None,
                           inline_keyboard: Optional[List[List[InlineKeyboardButton]]] = None,
                           parse_mode: Optional[str] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.

        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard: –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            inline_keyboard: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (Markdown, HTML)

        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            reply_markup = None

            if keyboard:
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            elif inline_keyboard:
                reply_markup = InlineKeyboardMarkup(inline_keyboard)

            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )

            self.logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            return True

        except TelegramError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
        except Exception as e:
            self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    async def send_document(self, chat_id: int, document_path: str,
                           caption: Optional[str] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Telegram.

        Args:
            chat_id: ID —á–∞—Ç–∞
            document_path: –ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
            caption: –ü–æ–¥–ø–∏—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            True –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            with open(document_path, 'rb') as doc:
                await self.bot.send_document(
                    chat_id=chat_id,
                    document=doc,
                    caption=caption
                )

            self.logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
            return True

        except TelegramError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Telegram: {e}")
            return False
        except Exception as e:
            self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return False

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π."""
        if not self.application:
            await self.initialize()

        try:
            self.logger.info("–ó–∞–ø—É—Å–∫ polling Telegram –±–æ—Ç–∞")
            await self.application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ polling Telegram –±–æ—Ç–∞: {e}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
        if self.application:
            await self.application.stop()
            await self.application.shutdown()
            self.logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ."""
        try:
            asyncio.run(self.start_polling())
        except KeyboardInterrupt:
            self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞")
            asyncio.run(self.stop())